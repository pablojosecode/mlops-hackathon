{"version":3,"file":"react-compare-slider.cjs.production.min.js","sources":["../src/Container.tsx","../src/ReactCompareSliderHandle.tsx","../src/utils.ts","../src/ReactCompareSlider.tsx","../src/ReactCompareSliderImage.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport type { ReactCompareSliderCommonProps } from './types';\n\n/** Container for clipped item. */\nexport const ContainerClip = forwardRef<HTMLDivElement, React.HTMLProps<HTMLDivElement>>(\n  (props, ref): React.ReactElement => {\n    const style: React.CSSProperties = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      willChange: 'clip',\n      userSelect: 'none',\n      KhtmlUserSelect: 'none',\n      MozUserSelect: 'none',\n      WebkitUserSelect: 'none',\n    };\n\n    return <div {...props} style={style} data-rcs=\"clip-item\" ref={ref} />;\n  }\n);\n\nContainerClip.displayName = 'ContainerClip';\n\n/** Container to control the handle's position. */\nexport const ContainerHandle = forwardRef<\n  HTMLDivElement,\n  React.HTMLProps<HTMLDivElement> & Pick<ReactCompareSliderCommonProps, 'portrait'>\n>(\n  ({ children, portrait }, ref): React.ReactElement => {\n    const style: React.CSSProperties = {\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none',\n    };\n\n    const innerStyle: React.CSSProperties = {\n      position: 'absolute',\n      width: portrait ? '100%' : undefined,\n      height: portrait ? undefined : '100%',\n      transform: portrait ? 'translateY(-50%)' : 'translateX(-50%)',\n      pointerEvents: 'all',\n    };\n\n    return (\n      <div style={style} data-rcs=\"handle-container\" ref={ref}>\n        <div style={innerStyle}>{children}</div>\n      </div>\n    );\n  }\n);\n\nContainerHandle.displayName = 'ThisHandleContainer';\n","import React from 'react';\n\nimport { ReactCompareSliderCommonProps } from './types';\n\ninterface ThisArrowProps {\n  /** Whether to flip the arrow direction. */\n  flip?: boolean;\n}\n\nconst ThisArrow: React.FC<ThisArrowProps> = ({ flip }) => {\n  const style: React.CSSProperties = {\n    width: 0,\n    height: 0,\n    borderTop: '8px solid transparent',\n    borderRight: '10px solid',\n    borderBottom: '8px solid transparent',\n    transform: flip ? 'rotate(180deg)' : undefined,\n  };\n\n  return <div style={style} />;\n};\n\n/** Props for `ReactCompareSliderHandle`. */\nexport interface ReactCompareSliderHandleProps\n  extends Pick<ReactCompareSliderCommonProps, 'portrait'> {\n  /** Optional styles for handle the button. */\n  buttonStyle?: React.CSSProperties;\n  /** Optional styles for lines either side of the handle button. */\n  linesStyle?: React.CSSProperties;\n  /** Optional styles for the handle root. */\n  style?: React.CSSProperties;\n}\n\n/** Default `handle`. */\nexport const ReactCompareSliderHandle: React.FC<ReactCompareSliderHandleProps> = ({\n  portrait,\n  buttonStyle,\n  linesStyle,\n  style,\n  ...props\n}): React.ReactElement => {\n  const _style: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: portrait ? 'row' : 'column',\n    placeItems: 'center',\n    height: '100%',\n    cursor: portrait ? 'ns-resize' : 'ew-resize',\n    pointerEvents: 'none',\n    color: '#fff',\n    ...style,\n  };\n\n  const _linesStyle: React.CSSProperties = {\n    flexGrow: 1,\n    height: portrait ? 2 : '100%',\n    width: portrait ? '100%' : 2,\n    backgroundColor: 'currentColor',\n    pointerEvents: 'auto',\n    boxShadow: '0 0 7px rgba(0,0,0,.35)',\n    ...linesStyle,\n  };\n\n  const _buttonStyle: React.CSSProperties = {\n    display: 'grid',\n    gridAutoFlow: 'column',\n    gap: 8,\n    placeContent: 'center',\n    flexShrink: 0,\n    width: 56,\n    height: 56,\n    borderRadius: '50%',\n    borderStyle: 'solid',\n    borderWidth: 2,\n    pointerEvents: 'auto',\n    backdropFilter: 'blur(7px)',\n    WebkitBackdropFilter: 'blur(7px)', // For Safari.\n    boxShadow: '0 0 7px rgba(0,0,0,.35)',\n    transform: portrait ? 'rotate(90deg)' : undefined,\n    ...buttonStyle,\n  };\n\n  return (\n    <div className=\"__rcs-handle-root\" {...props} style={_style}>\n      <div className=\"__rcs-handle-line\" style={_linesStyle} />\n      <div className=\"__rcs-handle-button\" style={_buttonStyle}>\n        <ThisArrow />\n        <ThisArrow flip />\n      </div>\n      <div className=\"__rcs-handle-line\" style={_linesStyle} />\n    </div>\n  );\n};\n","import { RefObject, useCallback, useEffect, useLayoutEffect, useRef } from 'react';\n\n/**\n * Stand-alone CSS utility to make replaced elements (`img`, `video`, etc.) fit their\n * container.\n */\nexport const styleFitContainer = ({\n  boxSizing = 'border-box',\n  objectFit = 'cover',\n  objectPosition = 'center',\n  ...props\n}: React.CSSProperties = {}): React.CSSProperties => ({\n  display: 'block',\n  width: '100%',\n  height: '100%',\n  maxWidth: '100%',\n  boxSizing,\n  objectFit,\n  objectPosition,\n  ...props,\n});\n\n/** Store the previous supplied value. */\nexport const usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>(value);\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n};\n\n/**\n * Event listener binding hook.\n * @param eventName      - Event to bind to.\n * @param handler        - Callback handler.\n * @param element        - Element to bind to.\n * @param handlerOptions - Event handler options.\n */\nexport const useEventListener = (\n  eventName: EventListener['name'],\n  handler: EventListener['caller'],\n  element: EventTarget,\n  handlerOptions: AddEventListenerOptions\n): void => {\n  const savedHandler = useRef<EventListener['caller']>();\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    // Make sure element supports addEventListener.\n    if (!(element && element.addEventListener)) return;\n\n    // Create event listener that calls handler function stored in ref.\n    const eventListener: EventListener = (event) =>\n      savedHandler.current && savedHandler.current(event);\n\n    element.addEventListener(eventName, eventListener, handlerOptions);\n\n    return (): void => {\n      element.removeEventListener(eventName, eventListener, handlerOptions);\n    };\n  }, [eventName, element, handlerOptions]);\n};\n\n/**\n * Conditionally use `useLayoutEffect` for client *or* `useEffect` for SSR.\n * @see <https://github.com/reduxjs/react-redux/blob/c581d480dd675f2645851fb006bef91aeb6ac24d/src/utils/useIsomorphicLayoutEffect.js>\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' && window.document && window.document.createElement\n    ? useLayoutEffect\n    : useEffect;\n\n/** Params passed to `useResizeObserver` `handler` function. */\nexport type UseResizeObserverHandlerParams = DOMRect;\n\n/**\n * Bind resize observer callback to element.\n * @param ref       - Element to bind to.\n * @param handler   - Callback for handling entry's bounding rect.\n */\nexport const useResizeObserver = (\n  ref: RefObject<Element>,\n  handler: (entry: UseResizeObserverHandlerParams) => void\n): void => {\n  const observer = useRef<ResizeObserver>();\n\n  const observe = useCallback(() => {\n    if (ref.current && observer.current) observer.current.observe(ref.current);\n  }, [ref]);\n\n  // Bind/rebind observer when `handler` changes.\n  useIsomorphicLayoutEffect(() => {\n    observer.current = new ResizeObserver(([entry]) => handler(entry.contentRect));\n    observe();\n\n    return (): void => {\n      if (observer.current) observer.current.disconnect();\n    };\n  }, [handler, observe]);\n};\n","import React, { useEffect, useCallback, useRef, useState } from 'react';\n\nimport { ContainerClip, ContainerHandle } from './Container';\nimport { ReactCompareSliderHandle } from './ReactCompareSliderHandle';\nimport { ReactCompareSliderCommonProps, ReactCompareSliderPropPosition } from './types';\nimport {\n  useEventListener,\n  usePrevious,\n  UseResizeObserverHandlerParams,\n  useResizeObserver,\n} from './utils';\n\n/** Comparison slider properties. */\nexport interface ReactCompareSliderProps extends Partial<ReactCompareSliderCommonProps> {\n  /** Padding to limit the slideable bounds in pixels on the X-axis (landscape) or Y-axis (portrait). */\n  boundsPadding?: number;\n  /** Whether the slider should follow the pointer on hover. */\n  changePositionOnHover?: boolean;\n  /** Custom handle component. */\n  handle?: React.ReactNode;\n  /** First item to show. */\n  itemOne: React.ReactNode;\n  /** Second item to show. */\n  itemTwo: React.ReactNode;\n  /** Whether to only change position when handle is interacted with (useful for touch devices). */\n  onlyHandleDraggable?: boolean;\n  /** Callback on position change with position as percentage. */\n  onPositionChange?: (position: ReactCompareSliderPropPosition) => void;\n}\n\n/** Properties for internal `updateInternalPosition` callback. */\ninterface UpdateInternalPositionProps\n  extends Required<Pick<ReactCompareSliderProps, 'boundsPadding' | 'portrait'>> {\n  /** X coordinate to update to (landscape). */\n  x: number;\n  /** Y coordinate to update to (portrait). */\n  y: number;\n  /** Whether to calculate using page X and Y offsets (required for pointer events). */\n  isOffset?: boolean;\n}\n\nconst EVENT_PASSIVE_PARAMS = { passive: true };\nconst EVENT_CAPTURE_PARAMS = { capture: true, passive: false };\n\n/** Root Comparison slider. */\nexport const ReactCompareSlider: React.FC<\n  ReactCompareSliderProps & React.HtmlHTMLAttributes<HTMLDivElement>\n> = ({\n  handle,\n  itemOne,\n  itemTwo,\n  onlyHandleDraggable = false,\n  onPositionChange,\n  portrait = false,\n  position = 50,\n  boundsPadding = 0,\n  changePositionOnHover = false,\n  style,\n  ...props\n}): React.ReactElement => {\n  /** DOM node of the root element. */\n  const rootContainerRef = useRef<HTMLDivElement>(null);\n  /** DOM node of the item that is clipped. */\n  const clipContainerRef = useRef<HTMLDivElement>(null);\n  /** DOM node of the handle container. */\n  const handleContainerRef = useRef<HTMLDivElement>(null);\n  /** Current position as a percentage value (initially negative to sync bounds on mount). */\n  const internalPositionPc = useRef(position);\n  /** Previous `position` prop value. */\n  const prevPropPosition = usePrevious(position);\n  /** Whether user is currently dragging. */\n  const [isDragging, setIsDragging] = useState(false);\n  /** Whether component has a `window` event binding. */\n  const hasWindowBinding = useRef(false);\n  /** Target container for pointer events. */\n  const [interactiveTarget, setInteractiveTarget] = useState<HTMLDivElement | null>();\n  /** Whether the bounds of the container element have been synchronised. */\n  const [didSyncBounds, setDidSyncBounds] = useState(false);\n\n  // Set target container for pointer events.\n  useEffect(() => {\n    setInteractiveTarget(\n      onlyHandleDraggable ? handleContainerRef.current : rootContainerRef.current\n    );\n  }, [onlyHandleDraggable]);\n\n  /** Update internal position value. */\n  const updateInternalPosition = useCallback(\n    function updateInternalCall({\n      x,\n      y,\n      isOffset,\n      portrait: _portrait,\n      boundsPadding: _boundsPadding,\n    }: UpdateInternalPositionProps) {\n      const { top, left, width, height } = (\n        rootContainerRef.current as HTMLDivElement\n      ).getBoundingClientRect();\n\n      // Early out if width or height are zero, can't calculate values\n      // from zeros.\n      if (width === 0 || height === 0) return;\n\n      /**\n       * Pixel position clamped within the container's bounds.\n       * @NOTE This does *not* take `boundsPadding` into account because we need\n       *       the full coords to correctly position the handle.\n       */\n      const positionPx = Math.min(\n        Math.max(\n          // Determine bounds based on orientation\n          _portrait\n            ? isOffset\n              ? y - top - window.pageYOffset\n              : y\n            : isOffset\n            ? x - left - window.pageXOffset\n            : x,\n          // Min value\n          0\n        ),\n        // Max value\n        _portrait ? height : width\n      );\n\n      /** Width or height with CSS scaling accounted for. */\n      const zoomScale = _portrait\n        ? height / ((rootContainerRef.current as HTMLDivElement).offsetHeight || 1)\n        : width / ((rootContainerRef.current as HTMLDivElement).offsetWidth || 1);\n\n      const adjustedPosition = positionPx / zoomScale;\n      const adjustedWidth = width / zoomScale;\n      const adjustedHeight = height / zoomScale;\n\n      /**\n       * Internal position percentage *without* bounds.\n       * @NOTE This uses the entire container bounds **without** `boundsPadding`\n       *       to get the *real* bounds.\n       */\n      const nextInternalPositionPc =\n        (adjustedPosition / (_portrait ? adjustedHeight : adjustedWidth)) * 100;\n\n      /** Whether the current pixel position meets the min/max bounds. */\n      const positionMeetsBounds = _portrait\n        ? adjustedPosition === 0 || adjustedPosition === adjustedHeight\n        : adjustedPosition === 0 || adjustedPosition === adjustedWidth;\n\n      const canSkipPositionPc =\n        nextInternalPositionPc === internalPositionPc.current &&\n        (internalPositionPc.current === 0 || internalPositionPc.current === 100);\n\n      // Early out if pixel and percentage positions are already at the min/max\n      // to prevent update spamming when the user is sliding outside of the\n      // container.\n      if (didSyncBounds && canSkipPositionPc && positionMeetsBounds) {\n        return;\n      } else {\n        setDidSyncBounds(true);\n      }\n\n      // Set new internal position.\n      internalPositionPc.current = nextInternalPositionPc;\n\n      /** Pixel position clamped to extremities *with* bounds padding. */\n      const clampedPx = Math.min(\n        // Get largest from pixel position *or* bounds padding.\n        Math.max(adjustedPosition, 0 + _boundsPadding),\n        // Use height *or* width based on orientation.\n        (_portrait ? adjustedHeight : adjustedWidth) - _boundsPadding\n      );\n\n      (clipContainerRef.current as HTMLElement).style.clip = _portrait\n        ? `rect(auto,auto,${clampedPx}px,auto)`\n        : `rect(auto,${clampedPx}px,auto,auto)`;\n\n      (handleContainerRef.current as HTMLElement).style.transform = _portrait\n        ? `translate3d(0,${clampedPx}px,0)`\n        : `translate3d(${clampedPx}px,0,0)`;\n\n      if (onPositionChange) onPositionChange(internalPositionPc.current);\n    },\n    [didSyncBounds, onPositionChange]\n  );\n\n  // Update internal position when other user controllable props change.\n  useEffect(() => {\n    const { width, height } = (\n      rootContainerRef.current as HTMLDivElement\n    ).getBoundingClientRect();\n\n    // Use current internal position if `position` hasn't changed.\n    const nextPosition =\n      position === prevPropPosition ? internalPositionPc.current : position;\n\n    updateInternalPosition({\n      portrait,\n      boundsPadding,\n      x: (width / 100) * nextPosition,\n      y: (height / 100) * nextPosition,\n    });\n  }, [portrait, position, prevPropPosition, boundsPadding, updateInternalPosition]);\n\n  /** Handle mouse/touch down. */\n  const handlePointerDown = useCallback(\n    (ev: MouseEvent | TouchEvent) => {\n      ev.preventDefault();\n\n      updateInternalPosition({\n        portrait,\n        boundsPadding,\n        isOffset: true,\n        x: ev instanceof MouseEvent ? ev.pageX : ev.touches[0].pageX,\n        y: ev instanceof MouseEvent ? ev.pageY : ev.touches[0].pageY,\n      });\n\n      setIsDragging(true);\n    },\n    [portrait, boundsPadding, updateInternalPosition]\n  );\n\n  /** Handle mouse/touch move. */\n  const handlePointerMove = useCallback(\n    function moveCall(ev: MouseEvent | TouchEvent) {\n      updateInternalPosition({\n        portrait,\n        boundsPadding,\n        isOffset: true,\n        x: ev instanceof MouseEvent ? ev.pageX : ev.touches[0].pageX,\n        y: ev instanceof MouseEvent ? ev.pageY : ev.touches[0].pageY,\n      });\n    },\n    [portrait, boundsPadding, updateInternalPosition]\n  );\n\n  /** Handle mouse/touch up. */\n  const handlePointerUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  /** Resync internal position on resize. */\n  const handleResize: (resizeProps: UseResizeObserverHandlerParams) => void = useCallback(\n    ({ width, height }) => {\n      const { width: scaledWidth, height: scaledHeight } = (\n        rootContainerRef.current as HTMLDivElement\n      ).getBoundingClientRect();\n\n      updateInternalPosition({\n        portrait,\n        boundsPadding,\n        x: ((width / 100) * internalPositionPc.current * scaledWidth) / width,\n        y: ((height / 100) * internalPositionPc.current * scaledHeight) / height,\n      });\n    },\n    [portrait, boundsPadding, updateInternalPosition]\n  );\n\n  // Allow drag outside of container while pointer is still down.\n  useEffect(() => {\n    if (isDragging && !hasWindowBinding.current) {\n      window.addEventListener('mousemove', handlePointerMove, EVENT_PASSIVE_PARAMS);\n      window.addEventListener('mouseup', handlePointerUp, EVENT_PASSIVE_PARAMS);\n      window.addEventListener('touchmove', handlePointerMove, EVENT_PASSIVE_PARAMS);\n      window.addEventListener('touchend', handlePointerUp, EVENT_PASSIVE_PARAMS);\n      hasWindowBinding.current = true;\n    }\n\n    return (): void => {\n      if (hasWindowBinding.current) {\n        window.removeEventListener('mousemove', handlePointerMove);\n        window.removeEventListener('mouseup', handlePointerUp);\n        window.removeEventListener('touchmove', handlePointerMove);\n        window.removeEventListener('touchend', handlePointerUp);\n        hasWindowBinding.current = false;\n      }\n    };\n  }, [handlePointerMove, handlePointerUp, isDragging]);\n\n  // Bind resize observer to container.\n  useResizeObserver(rootContainerRef, handleResize);\n\n  // Handle hover events on the container.\n  useEffect(() => {\n    const containerRef = rootContainerRef.current as HTMLDivElement;\n\n    const handleMouseLeave = () => {\n      if (isDragging) return;\n      handlePointerUp();\n    };\n\n    if (changePositionOnHover) {\n      containerRef.addEventListener('mousemove', handlePointerMove, EVENT_PASSIVE_PARAMS);\n      containerRef.addEventListener('mouseleave', handleMouseLeave, EVENT_PASSIVE_PARAMS);\n    }\n\n    return () => {\n      containerRef.removeEventListener('mousemove', handlePointerMove);\n      containerRef.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, [changePositionOnHover, handlePointerMove, handlePointerUp, isDragging]);\n\n  useEventListener(\n    'mousedown',\n    handlePointerDown,\n    interactiveTarget as HTMLDivElement,\n    EVENT_CAPTURE_PARAMS\n  );\n\n  useEventListener(\n    'touchstart',\n    handlePointerDown,\n    interactiveTarget as HTMLDivElement,\n    EVENT_CAPTURE_PARAMS\n  );\n\n  // Use custom handle if requested.\n  const Handle = handle || <ReactCompareSliderHandle portrait={portrait} />;\n\n  const rootStyle: React.CSSProperties = {\n    position: 'relative',\n    overflow: 'hidden',\n    cursor: isDragging ? (portrait ? 'ns-resize' : 'ew-resize') : undefined,\n    userSelect: 'none',\n    KhtmlUserSelect: 'none',\n    msUserSelect: 'none',\n    MozUserSelect: 'none',\n    WebkitUserSelect: 'none',\n    ...style,\n  };\n\n  return (\n    <div {...props} ref={rootContainerRef} style={rootStyle} data-rcs=\"root\">\n      {itemTwo}\n      <ContainerClip ref={clipContainerRef}>{itemOne}</ContainerClip>\n      <ContainerHandle portrait={portrait} ref={handleContainerRef}>\n        {Handle}\n      </ContainerHandle>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { styleFitContainer } from './utils';\n\n/** Props for `ReactCompareSliderImage`. */\nexport type ReactCompareSliderImageProps = React.ImgHTMLAttributes<HTMLImageElement>;\n\n/** Image with defaults from `styleFitContainer` applied. */\nexport const ReactCompareSliderImage: React.FC<ReactCompareSliderImageProps> = ({\n  style,\n  ...props\n}): React.ReactElement => {\n  const rootStyle: React.CSSProperties = styleFitContainer(style);\n\n  return <img {...props} style={rootStyle} data-rcs=\"image\" />;\n};\n"],"names":["ContainerClip","forwardRef","props","ref","React","style","position","top","left","width","height","willChange","userSelect","KhtmlUserSelect","MozUserSelect","WebkitUserSelect","displayName","ContainerHandle","children","portrait","pointerEvents","undefined","transform","ThisArrow","flip","borderTop","borderRight","borderBottom","ReactCompareSliderHandle","buttonStyle","linesStyle","_style","display","flexDirection","placeItems","cursor","color","_linesStyle","flexGrow","backgroundColor","boxShadow","_buttonStyle","gridAutoFlow","gap","placeContent","flexShrink","borderRadius","borderStyle","borderWidth","backdropFilter","WebkitBackdropFilter","className","styleFitContainer","boxSizing","objectFit","objectPosition","maxWidth","useEventListener","eventName","handler","element","handlerOptions","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","useIsomorphicLayoutEffect","window","document","createElement","useLayoutEffect","EVENT_PASSIVE_PARAMS","passive","EVENT_CAPTURE_PARAMS","capture","handle","itemOne","itemTwo","onlyHandleDraggable","onPositionChange","boundsPadding","changePositionOnHover","rootContainerRef","clipContainerRef","handleContainerRef","internalPositionPc","prevPropPosition","value","usePrevious","isDragging","setIsDragging","useState","hasWindowBinding","interactiveTarget","setInteractiveTarget","didSyncBounds","setDidSyncBounds","updateInternalPosition","useCallback","x","y","isOffset","_portrait","_boundsPadding","getBoundingClientRect","positionPx","Math","min","max","pageYOffset","pageXOffset","zoomScale","offsetHeight","offsetWidth","adjustedPosition","adjustedWidth","adjustedHeight","nextInternalPositionPc","clampedPx","clip","nextPosition","handlePointerDown","ev","preventDefault","MouseEvent","pageX","touches","pageY","handlePointerMove","handlePointerUp","handleResize","scaledWidth","scaledHeight","observer","observe","ResizeObserver","entry","contentRect","disconnect","useResizeObserver","containerRef","handleMouseLeave","Handle","rootStyle","overflow","msUserSelect"],"mappings":"oJAKO,MAAMA,EAAgBC,aAC3B,CAACC,EAAOC,IAcCC,uCAASF,GAAOG,MAbY,CACjCC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,WAAY,OACZC,WAAY,OACZC,gBAAiB,OACjBC,cAAe,OACfC,iBAAkB,mBAG0B,YAAYZ,IAAKA,MAInEH,EAAcgB,YAAc,gBAGrB,MAAMC,EAAkBhB,aAI7B,EAAGiB,SAAAA,EAAUC,SAAAA,GAAYhB,IAkBrBC,uBAAKC,MAjB4B,CACjCC,SAAU,WACVC,IAAK,EACLE,MAAO,OACPC,OAAQ,OACRU,cAAe,mBAYa,mBAAmBjB,IAAKA,GAClDC,uBAAKC,MAV+B,CACtCC,SAAU,WACVG,MAAOU,EAAW,YAASE,EAC3BX,OAAQS,OAAWE,EAAY,OAC/BC,UAAWH,EAAW,mBAAqB,mBAC3CC,cAAe,QAKYF,KAMjCD,EAAgBD,YAAc,sBC/C9B,MAAMO,EAAsC,EAAGC,KAAAA,KAUtCpB,uBAAKC,MATuB,CACjCI,MAAO,EACPC,OAAQ,EACRe,UAAW,wBACXC,YAAa,aACbC,aAAc,wBACdL,UAAWE,EAAO,sBAAmBH,KAkB5BO,EAAoE,EAC/ET,SAAAA,EACAU,YAAAA,EACAC,WAAAA,EACAzB,MAAAA,KACGH,YAEG6B,EAA8B,CAClCC,QAAS,OACTC,cAAed,EAAW,MAAQ,SAClCe,WAAY,SACZxB,OAAQ,OACRyB,OAAQhB,EAAW,YAAc,YACjCC,cAAe,OACfgB,MAAO,UACJ/B,GAGCgC,EAAmC,CACvCC,SAAU,EACV5B,OAAQS,EAAW,EAAI,OACvBV,MAAOU,EAAW,OAAS,EAC3BoB,gBAAiB,eACjBnB,cAAe,OACfoB,UAAW,6BACRV,GAGCW,EAAoC,CACxCT,QAAS,OACTU,aAAc,SACdC,IAAK,EACLC,aAAc,SACdC,WAAY,EACZpC,MAAO,GACPC,OAAQ,GACRoC,aAAc,MACdC,YAAa,QACbC,YAAa,EACb5B,cAAe,OACf6B,eAAgB,YAChBC,qBAAsB,YACtBV,UAAW,0BACXlB,UAAWH,EAAW,qBAAkBE,KACrCQ,UAIHzB,qCAAK+C,UAAU,qBAAwBjD,GAAOG,MAAO0B,IACnD3B,uBAAK+C,UAAU,oBAAoB9C,MAAOgC,IAC1CjC,uBAAK+C,UAAU,sBAAsB9C,MAAOoC,GAC1CrC,gBAACmB,QACDnB,gBAACmB,GAAUC,WAEbpB,uBAAK+C,UAAU,oBAAoB9C,MAAOgC,MClFnCe,EAAoB,EAC/BC,UAAAA,EAAY,aACZC,UAAAA,EAAY,QACZC,eAAAA,EAAiB,YACdrD,GACoB,OACvB8B,QAAS,QACTvB,MAAO,OACPC,OAAQ,OACR8C,SAAU,OACVH,UAAAA,EACAC,UAAAA,EACAC,eAAAA,KACGrD,IAqBQuD,EAAmB,CAC9BC,EACAC,EACAC,EACAC,WAEMC,EAAeC,WAErBC,YAAU,KACRF,EAAaG,QAAUN,GACtB,CAACA,IAEJK,YAAU,SAEFJ,IAAWA,EAAQM,iBAAmB,aAGtCC,EAAgCC,GACpCN,EAAaG,SAAWH,EAAaG,QAAQG,UAE/CR,EAAQM,iBAAiBR,EAAWS,EAAeN,GAE5C,KACLD,EAAQS,oBAAoBX,EAAWS,EAAeN,KAEvD,CAACH,EAAWE,EAASC,KAObS,EACO,oBAAXC,QAA0BA,OAAOC,UAAYD,OAAOC,SAASC,cAChEC,kBACAV,YClCAW,EAAuB,CAAEC,SAAS,GAClCC,EAAuB,CAAEC,SAAS,EAAMF,SAAS,8BAKnD,EACFG,OAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAC,oBAAAA,GAAsB,EACtBC,iBAAAA,EACAhE,SAAAA,GAAW,EACXb,SAAAA,EAAW,GACX8E,cAAAA,EAAgB,EAChBC,sBAAAA,GAAwB,EACxBhF,MAAAA,KACGH,YAGGoF,EAAmBvB,SAAuB,MAE1CwB,EAAmBxB,SAAuB,MAE1CyB,EAAqBzB,SAAuB,MAE5C0B,EAAqB1B,SAAOzD,GAE5BoF,ED9CuBC,CAAAA,UACvBxF,EAAM4D,SAAU4B,UAEtB3B,YAAU,KACR7D,EAAI8D,QAAU0B,IAGTxF,EAAI8D,SCuCc2B,CAAYtF,IAE9BuF,EAAYC,GAAiBC,YAAS,GAEvCC,EAAmBjC,UAAO,IAEzBkC,EAAmBC,GAAwBH,cAE3CI,EAAeC,GAAoBL,YAAS,GAGnD/B,YAAU,KACRkC,EACEhB,EAAsBM,EAAmBvB,QAAUqB,EAAiBrB,UAErE,CAACiB,UAGEmB,EAAyBC,eAC7B,UAA4BC,EAC1BA,EAD0BC,EAE1BA,EAF0BC,SAG1BA,EACAtF,SAAUuF,EACVtB,cAAeuB,UAETpG,IAAEA,EAAFC,KAAOA,EAAPC,MAAaA,EAAbC,OAAoBA,GACxB4E,EAAiBrB,QACjB2C,2BAIY,IAAVnG,GAA0B,IAAXC,EAAc,aAO3BmG,EAAaC,KAAKC,IACtBD,KAAKE,IAEHN,EACID,EACED,EAAIjG,EAAMgE,OAAO0C,YACjBT,EACFC,EACAF,EAAI/F,EAAO+D,OAAO2C,YAClBX,KAKNG,EAAYhG,EAASD,GAIjB0G,EAAYT,EACdhG,GAAW4E,EAAiBrB,QAA2BmD,cAAgB,GACvE3G,GAAU6E,EAAiBrB,QAA2BoD,aAAe,GAEnEC,EAAmBT,EAAaM,EAChCI,EAAgB9G,EAAQ0G,EACxBK,EAAiB9G,EAASyG,EAO1BM,EACHH,GAAoBZ,EAAYc,EAAiBD,GAAkB,OAclEpB,GANFsB,IAA2BhC,EAAmBxB,UACd,IAA/BwB,EAAmBxB,SAAgD,MAA/BwB,EAAmBxB,WAN9ByC,EACH,IAArBY,GAA0BA,IAAqBE,EAC1B,IAArBF,GAA0BA,IAAqBC,UAYjDnB,GAAiB,GAInBX,EAAmBxB,QAAUwD,QAGvBC,EAAYZ,KAAKC,IAErBD,KAAKE,IAAIM,EAAkB,EAAIX,IAE9BD,EAAYc,EAAiBD,GAAiBZ,GAGhDpB,EAAiBtB,QAAwB5D,MAAMsH,KAAOjB,oBACjCgB,yBACLA,iBAEhBlC,EAAmBvB,QAAwB5D,MAAMiB,UAAYoF,mBACzCgB,wBACFA,WAEfvC,GAAkBA,EAAiBM,EAAmBxB,WAE5D,CAACkC,EAAehB,IAIlBnB,YAAU,WACFvD,MAAEA,EAAFC,OAASA,GACb4E,EAAiBrB,QACjB2C,wBAGIgB,EACJtH,IAAaoF,EAAmBD,EAAmBxB,QAAU3D,EAE/D+F,EAAuB,CACrBlF,SAAAA,EACAiE,cAAAA,EACAmB,EAAI9F,EAAQ,IAAOmH,EACnBpB,EAAI9F,EAAS,IAAOkH,KAErB,CAACzG,EAAUb,EAAUoF,EAAkBN,EAAeiB,UAGnDwB,EAAoBvB,cACvBwB,IACCA,EAAGC,iBAEH1B,EAAuB,CACrBlF,SAAAA,EACAiE,cAAAA,EACAqB,UAAU,EACVF,EAAGuB,aAAcE,WAAaF,EAAGG,MAAQH,EAAGI,QAAQ,GAAGD,MACvDzB,EAAGsB,aAAcE,WAAaF,EAAGK,MAAQL,EAAGI,QAAQ,GAAGC,QAGzDrC,GAAc,IAEhB,CAAC3E,EAAUiE,EAAeiB,IAItB+B,EAAoB9B,eACxB,SAAkBwB,GAChBzB,EAAuB,CACrBlF,SAAAA,EACAiE,cAAAA,EACAqB,UAAU,EACVF,EAAGuB,aAAcE,WAAaF,EAAGG,MAAQH,EAAGI,QAAQ,GAAGD,MACvDzB,EAAGsB,aAAcE,WAAaF,EAAGK,MAAQL,EAAGI,QAAQ,GAAGC,UAG3D,CAAChH,EAAUiE,EAAeiB,IAItBgC,EAAkB/B,cAAY,KAClCR,GAAc,IACb,IAGGwC,EAAsEhC,cAC1E,EAAG7F,MAAAA,EAAOC,OAAAA,YACAD,MAAO8H,EAAa7H,OAAQ8H,GAClClD,EAAiBrB,QACjB2C,wBAEFP,EAAuB,CACrBlF,SAAAA,EACAiE,cAAAA,EACAmB,EAAK9F,EAAQ,IAAOgF,EAAmBxB,QAAUsE,EAAe9H,EAChE+F,EAAK9F,EAAS,IAAO+E,EAAmBxB,QAAUuE,EAAgB9H,KAGtE,CAACS,EAAUiE,EAAeiB,IAI5BrC,YAAU,KACJ6B,IAAeG,EAAiB/B,UAClCM,OAAOL,iBAAiB,YAAakE,EAAmBzD,GACxDJ,OAAOL,iBAAiB,UAAWmE,EAAiB1D,GACpDJ,OAAOL,iBAAiB,YAAakE,EAAmBzD,GACxDJ,OAAOL,iBAAiB,WAAYmE,EAAiB1D,GACrDqB,EAAiB/B,SAAU,GAGtB,KACD+B,EAAiB/B,UACnBM,OAAOF,oBAAoB,YAAa+D,GACxC7D,OAAOF,oBAAoB,UAAWgE,GACtC9D,OAAOF,oBAAoB,YAAa+D,GACxC7D,OAAOF,oBAAoB,WAAYgE,GACvCrC,EAAiB/B,SAAU,KAG9B,CAACmE,EAAmBC,EAAiBxC,ID9LT,EAC/B1F,EACAwD,WAEM8E,EAAW1E,WAEX2E,EAAUpC,cAAY,KACtBnG,EAAI8D,SAAWwE,EAASxE,SAASwE,EAASxE,QAAQyE,QAAQvI,EAAI8D,UACjE,CAAC9D,IAGJmE,EAA0B,KACxBmE,EAASxE,QAAU,IAAI0E,eAAe,EAAEC,KAAWjF,EAAQiF,EAAMC,cACjEH,IAEO,KACDD,EAASxE,SAASwE,EAASxE,QAAQ6E,eAExC,CAACnF,EAAS+E,KC+KbK,CAAkBzD,EAAkBgD,GAGpCtE,YAAU,WACFgF,EAAe1D,EAAiBrB,QAEhCgF,EAAmB,KACnBpD,GACJwC,YAGEhD,IACF2D,EAAa9E,iBAAiB,YAAakE,EAAmBzD,GAC9DqE,EAAa9E,iBAAiB,aAAc+E,EAAkBtE,IAGzD,KACLqE,EAAa3E,oBAAoB,YAAa+D,GAC9CY,EAAa3E,oBAAoB,aAAc4E,KAEhD,CAAC5D,EAAuB+C,EAAmBC,EAAiBxC,IAE/DpC,EACE,YACAoE,EACA5B,EACApB,GAGFpB,EACE,aACAoE,EACA5B,EACApB,SAIIqE,EAASnE,GAAU3E,gBAACwB,GAAyBT,SAAUA,IAEvDgI,EAAiC,CACrC7I,SAAU,WACV8I,SAAU,SACVjH,OAAQ0D,EAAc1E,EAAW,YAAc,iBAAeE,EAC9DT,WAAY,OACZC,gBAAiB,OACjBwI,aAAc,OACdvI,cAAe,OACfC,iBAAkB,UACfV,UAIHD,uCAASF,GAAOC,IAAKmF,EAAkBjF,MAAO8I,aAAoB,SAC/DlE,EACD7E,gBAACJ,GAAcG,IAAKoF,GAAmBP,GACvC5E,gBAACa,GAAgBE,SAAUA,EAAUhB,IAAKqF,GACvC0D,wECtUsE,EAC7E7I,MAAAA,KACGH,YAEGiJ,EAAiC/F,EAAkB/C,UAElDD,uCAASF,GAAOG,MAAO8I,aAAoB"}